{"version":3,"sources":["useFetchJobs.js","Component/Job.js","Component/JobsPagination.js","Component/SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["ACTIONS","BASE_URL","reducer","state","action","type","loading","jobs","payload","error","hasNextPage","Job","jobz","useState","open","setOpen","Card","className","Body","Title","title","company","Subtitle","Date","created_at","toLocaleDateString","Badge","variant","location","style","wordBreak","source","how_to_apply","height","alt","src","company_logo","Text","Button","onClick","prevOpen","Collapse","in","description","JobsPagination","page","setPage","Pagination","Prev","adjustPage","Item","Ellipsis","active","Next","SearchForm","params","onParamChange","Form","Row","Group","as","Col","Label","Control","onChange","value","name","xs","Check","fulltime","id","label","App","setParams","useReducer","dispatch","useEffect","cancelToken1","axios","CancelToken","get","cancelToken","token","markdown","then","res","data","catch","e","isCancel","cancelToken2","length","cancel","useFetchJobs","Container","param","target","prevParams","map","job","key","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.1114bf05.chunk.js","sourcesContent":["import { useReducer, useEffect } from 'react'\nimport axios from 'axios'\n\nconst ACTIONS = {\n  MAKE_REQUEST: 'make-request',\n  GET_DATA: 'get-data',\n  ERROR: 'error',\n  UPDATE_HAS_NEXT_PAGE: 'update-has-next-page'\n}\n\nconst BASE_URL = 'https://jobs.github.com/positions.json'\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.MAKE_REQUEST:\n      return { loading: true, jobs: [] }\n    case ACTIONS.GET_DATA:\n      return { ...state, loading: false, jobs: action.payload.jobs }\n    case ACTIONS.ERROR:\n      return { ...state, loading: false, error: action.payload.error, jobs: [] }\n    case ACTIONS.UPDATE_HAS_NEXT_PAGE:\n      return { ...state, hasNextPage: action.payload.hasNextPage }\n    default:\n      return state\n  }\n}\n\nexport default function useFetchJobs(params, page) {\n  const [state, dispatch] = useReducer(reducer, { jobs: [], loading: true })\n\n  useEffect(() => {\n    const cancelToken1 = axios.CancelToken.source()\n    dispatch({ type: ACTIONS.MAKE_REQUEST })\n    axios.get(BASE_URL, {\n      cancelToken: cancelToken1.token,\n      params: { markdown: true, page: page, ...params }\n    }).then(res => {\n      dispatch({ type: ACTIONS.GET_DATA, payload: { jobs: res.data } }) \n    }).catch(e => {\n      if (axios.isCancel(e)) return\n      dispatch({ type: ACTIONS.ERROR, payload: { error: e } }) \n    })\n\n    const cancelToken2 = axios.CancelToken.source()\n    axios.get(BASE_URL, {\n      cancelToken: cancelToken2.token,\n      params: { markdown: true, page: page + 1, ...params }\n    }).then(res => {\n      dispatch({ type: ACTIONS.UPDATE_HAS_NEXT_PAGE, payload: { hasNextPage: res.data.length !== 0 } }) \n    }).catch(e => {\n      if (axios.isCancel(e)) return\n      dispatch({ type: ACTIONS.ERROR, payload: { error: e } }) \n    })\n\n    return () => {\n      cancelToken1.cancel()\n      cancelToken2.cancel()\n    }\n  }, [params, page])\n  \n  return state\n}","import React, { useState } from 'react'\nimport { Card, Badge,Button, Collapse } from 'react-bootstrap'\nimport ReactMarkdown from 'react-markdown'\n\n\nexport default function Job({jobz}) {\n    \n        const [open, setOpen] = useState(false);\n        return (\n            <Card className=\"mb-3\">\n                <Card.Body>\n                    <div className=\"d-flex justify-content-between\">\n                        <div>\n                            <Card.Title>\n                                {jobz.title} - <span className=\"text-muted font-weight-light\">{jobz.company}</span>\n                            </Card.Title>\n                            <Card.Subtitle>\n                                {new Date(jobz.created_at).toLocaleDateString()}\n                            </Card.Subtitle>\n                            <Badge variant=\"secondary\" className=\"mr-2\">{jobz.type}</Badge>\n                            <Badge variant=\"secondary\">{jobz.location}</Badge>\n                            <div style={{wordBreak:\"break-all\"}}>\n                                <ReactMarkdown source={jobz.how_to_apply}/>\n                            </div>\n                        </div>\n                        <img className=\"d-none d-md-block\" height=\"50px\" alt={jobz.company} src={jobz.company_logo} />\n                    </div>\n                    <Card.Text>\n                    <Button onClick={()=>setOpen(prevOpen => !prevOpen)} variant=\"primary\">\n                            {open ? \"Hide Details\" : \"View Details\"}</Button>\n                    </Card.Text>\n                    <Collapse in={open}>\n                        <div className=\"mt-4\">\n                            <ReactMarkdown source={jobz.description}/>\n                        </div>\n                    </Collapse>\n                </Card.Body>\n\n            </Card>\n        )\n    \n}\n","import React from 'react';\nimport {Pagination} from 'react-bootstrap';\n\nexport default function JobsPagination({page, setPage, hasNextPage}) {\n    function adjustPage(amount){\n        //setPage(prevPage => prevPage + amount)\n    }\n\n    return(\n        <div>\n            <Pagination>\n                {page > 1 ? <Pagination.Prev onClick={adjustPage(-1)}></Pagination.Prev> : ''}                \n                {page !== 1 && <Pagination.Item onClick={setPage(1)}>1</Pagination.Item>}\n                {page > 2 && <Pagination.Ellipsis/>}\n                {page > 2 && <Pagination.Item onClick={adjustPage(-1)}>{page - 1}</Pagination.Item>}\n                <Pagination.Item active>{page}</Pagination.Item>\n                {hasNextPage && <Pagination.Item onClick={adjustPage(1)}>{page + 1}</Pagination.Item>}\n                {hasNextPage && <Pagination.Next onClick={adjustPage(1)}></Pagination.Next>}\n            </Pagination>\n        </div>\n    )\n}","import React from 'react';\nimport {Form, Col } from 'react-bootstrap';\n\nexport default function SearchForm({ params, onParamChange }) {\n    return (\n        <Form className=\"mb-4\">\n            <Form.Row>\n                <Form.Group as={Col}>\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control type=\"text\" onChange={onParamChange} value={params.description} name=\"description\" />\n                </Form.Group>\n                <Form.Group as={Col}>\n                    <Form.Label>Location</Form.Label>\n                    <Form.Control type=\"text\" onChange={onParamChange} value={params.location} name=\"location\" />\n                </Form.Group>\n                <Form.Group as={Col} xs=\"auto\" className=\"m1-2\">\n                    <Form.Check onChange={onParamChange} value={params.fulltime} name=\"full_time\" id=\"full_time\" label=\"Only Full Time\" type=\"checkbox\" className=\"mb-2\"/>\n                </Form.Group>\n            </Form.Row>\n        </Form>\n    )\n}","import React, { useState } from 'react';\nimport useFetchJobs from './useFetchJobs'\nimport { Container } from 'react-bootstrap'\nimport Job from './Component/Job'\nimport JobsPagination from './Component/JobsPagination';\nimport SearchForm from './Component/SearchForm';\n\nfunction App() {\n  const [params, setParams] = useState({})\n  const [page, setPage] = useState(1)\n  const { jobs, loading, error, hasNextPage } = useFetchJobs(params, page)\n\n  function handleParamChange(e) {\n    const param = e.target.name\n    const value = e.target.value\n    setPage(1)\n    setParams(prevParams => {\n      return { ...prevParams, [param]: value }\n    })\n  }\n\n  return (\n    <Container className=\"my-4\">\n      <h1 className=\"mb-4\">Jobs Junction</h1>\n      <SearchForm params={params} onParamChange={handleParamChange} />\n      <JobsPagination page={page} setPage={setPage} hasNextPage={hasNextPage} />\n      {loading && <h1>Loading Data...</h1>}\n      {error && <h1>Error. Try Refreshing.</h1>}\n      {jobs.map(job => {\n        return <Job key={job.id} job={job} />\n      })}\n      <JobsPagination page={page} setPage={setPage} hasNextPage={hasNextPage} />\n    </Container>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}